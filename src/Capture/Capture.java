/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Capture;

import Util.ConnectDB;
import Util.ControlPerson;
import Util.ModelPerson;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.*;

import java.nio.IntBuffer;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import org.bytedeco.javacpp.BytePointer;
import static org.bytedeco.opencv.global.opencv_core.CV_32SC1;

import static org.bytedeco.opencv.global.opencv_imgcodecs.imencode;

import static org.bytedeco.opencv.global.opencv_imgcodecs.imread;
import static org.bytedeco.opencv.global.opencv_imgcodecs.imwrite;
import org.bytedeco.opencv.global.opencv_imgproc;
import static org.bytedeco.opencv.global.opencv_imgproc.COLOR_BGRA2GRAY;
import static org.bytedeco.opencv.global.opencv_imgproc.cvtColor;
import static org.bytedeco.opencv.global.opencv_imgproc.rectangle;
import org.bytedeco.opencv.opencv_core.Mat;
import org.bytedeco.opencv.opencv_core.MatVector;
import org.bytedeco.opencv.opencv_core.Rect;
import org.bytedeco.opencv.opencv_core.RectVector;
import org.bytedeco.opencv.opencv_core.Scalar;
import org.bytedeco.opencv.opencv_core.Size;
import org.bytedeco.opencv.opencv_face.FaceRecognizer;
import org.bytedeco.opencv.opencv_face.LBPHFaceRecognizer;
import org.bytedeco.opencv.opencv_objdetect.CascadeClassifier;
import org.bytedeco.opencv.opencv_videoio.VideoCapture;

public class Capture extends javax.swing.JFrame {

	private Capture.DaemonThread myThread = null;

	// JavaCV
	VideoCapture webSource = null;
	Mat cameraImage = new Mat();
	CascadeClassifier cascade = new CascadeClassifier("C:\\photos\\haarcascade_frontalface_alt.xml");
	BytePointer mem = new BytePointer();
	RectVector detectedFaces = new RectVector();

	String root, firstNamePerson, lastNamePerson, officePerson, dobPerson;
	int numSamples = 25, sample = 1, idPerson;
	ConnectDB db = new ConnectDB();

	public Capture(int id, String fName, String lName, String dob, String office) {
		initComponents();
		idPerson = id;
		firstNamePerson = fName;
		lastNamePerson = lName;
		dobPerson = dob;
		officePerson = office;

		startCamera();
	}

	private Capture() {
		throw new UnsupportedOperationException("Not supported yet."); // To change body of generated methods, choose
																		// Tools | Templates.
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		label_photo = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		counterLabel = new javax.swing.JLabel();
		saveButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Security System - Capture Photos");
		getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		jPanel1.setBackground(new java.awt.Color(250, 250, 250));
		jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
		jLabel1.setForeground(new java.awt.Color(153, 153, 153));
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setText("CAPTURE 25 SNAPSHOTS");
		jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 50));

		label_photo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(200, 200, 200)));
		jPanel1.add(label_photo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 440, 450));

		jPanel2.setBackground(new java.awt.Color(255, 255, 255));
		jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		counterLabel.setBackground(new java.awt.Color(114, 138, 197));
		counterLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
		counterLabel.setForeground(new java.awt.Color(255, 255, 255));
		counterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		counterLabel.setText("00");
		counterLabel.setOpaque(true);
		jPanel2.add(counterLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 80, 30));

		saveButton.setBackground(new java.awt.Color(45, 198, 72));
		saveButton.setForeground(new java.awt.Color(255, 255, 255));
		saveButton.setText("Capture");
		saveButton.setContentAreaFilled(false);
		saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
		saveButton.setOpaque(true);
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}
		});
		jPanel2.add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 120, 40));

		jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, 440, 90));

		getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 480, 610));

		setSize(new java.awt.Dimension(498, 660));
		setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_saveButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Windows".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Capture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Capture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Capture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Capture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Capture().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel counterLabel;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JLabel label_photo;
	private javax.swing.JButton saveButton;
	// End of variables declaration//GEN-END:variables

	class DaemonThread implements Runnable {

		protected volatile boolean runnable = false;

		@Override
		public void run() {
			synchronized (this) {
				while (runnable) {
					try {
						if (webSource.grab()) {
							webSource.retrieve(cameraImage);
							Graphics g = label_photo.getGraphics();
							Mat imageColor = new Mat();
							imageColor = cameraImage;

							Mat imageGray = new Mat();
							cvtColor(imageColor, imageGray, COLOR_BGRA2GRAY);

							RectVector detectedFaces = new RectVector();
							cascade.detectMultiScale(imageColor, detectedFaces, 1.1, 1, 0, new Size(150, 150),
									new Size(500, 500));

							for (int i = 0; i < detectedFaces.size(); i++) {
								Rect dadosFace = detectedFaces.get(0);
								rectangle(imageColor, dadosFace, new Scalar(255, 255, 255, 5));
								Mat face = new Mat(imageGray, dadosFace);
								opencv_imgproc.resize(face, face, new Size(160, 160));

								if (saveButton.getModel().isPressed()) {

									if (sample <= numSamples) {
										String cropped = "C:\\photos\\person." + idPerson + "." + sample + ".jpg";
										imwrite(cropped, face);

										counterLabel.setText(String.valueOf(sample));
										sample++;
									}
									if (sample > 25) {
										generate();
										try {
											insertDatabase();
										} catch (ClassNotFoundException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										System.out.println("File Generated");
										stopCamera();
									}
								}
							}

							imencode(".bmp", cameraImage, mem);
							Image im = ImageIO.read(new ByteArrayInputStream(mem.getStringBytes()));
							BufferedImage buff = (BufferedImage) im;

							if (g.drawImage(buff, 0, 0, getWidth(), getHeight() - 90, 0, 0, buff.getWidth(),
									buff.getHeight(), null)) {
								if (runnable == false) {
									System.out.println("Save a photo");
									this.wait();
								}
							}
						}

					} catch (IOException ex) {
						ex.printStackTrace();
						JOptionPane.showMessageDialog(null, "Lỗi camera (IOEx)\n" + ex);
					} catch (InterruptedException ex) {
						ex.printStackTrace();
						JOptionPane.showMessageDialog(null, "Lỗi camera (Interrupted)\n" + ex);
					}
				}
			}
		}
	}

	public void generate() {
		File directory = new File("C:\\photos\\");
		FilenameFilter filter = new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				return name.endsWith(".jpg") || name.endsWith(".png");
			}
		};

		File[] files = directory.listFiles(filter);
		MatVector photos = new MatVector(files.length);
		Mat labels = new Mat(files.length, 1, CV_32SC1);
		IntBuffer labelsBuffer = labels.createBuffer();

		int counter = 0;
		for (File image : files) {
			Mat photo = imread(image.getAbsolutePath(), COLOR_BGRA2GRAY);
			int idPerson = Integer.parseInt(image.getName().split("\\.")[1]);
			opencv_imgproc.resize(photo, photo, new Size(160, 160));
			photos.put(counter, photo);
			labelsBuffer.put(counter, idPerson);
			counter++;
		}

		FaceRecognizer lbph = LBPHFaceRecognizer.create();
		lbph.train(photos, labels);
		lbph.save("C:\\photos\\classifierLBPH.yml");

	}

	public void insertDatabase() throws ClassNotFoundException {
		ControlPerson cp = new ControlPerson();
		ModelPerson mod = new ModelPerson();
		mod.setId(idPerson);
		System.out.println("Tới đây");
		mod.setFirstname(firstNamePerson);
		mod.setLastname(lastNamePerson);
		mod.setDob(dobPerson);
		mod.setOffice(officePerson);
		cp.insert(mod);
	}

	public void stopCamera() {
		myThread.runnable = false;
		webSource.release();
		dispose();
	}

	public void startCamera() {
		webSource = new VideoCapture(0);
		myThread = new Capture.DaemonThread();
		Thread t = new Thread(myThread);
		t.setDaemon(true);
		myThread.runnable = true;
		t.start();
	}
}
